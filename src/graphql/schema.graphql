# source: http://localhost:60000/simple/v1/cja7zkr2r00cr0141ap4hnb55
# timestamp: Sat Dec 16 2017 21:18:25 GMT-0500 (EST)

enum _ModelMutationType {
  CREATED
  UPDATED
  DELETED
}

# Meta information about the query.
type _QueryMeta {
  count: Int!
}

type AddToCommentAuthorPayload {
  commentsComment: Comment
  authorUser: User
}

type AddToEventOnUserPayload {
  eventsEvent: Event
  attendeesUser: User
}

type AddToGroupUsersPayload {
  groupsGroup: Group
  usersUser: User
}

type AddToPostOnCommentPayload {
  commentsComment: Comment
  postPost: Post
}

type AddToPostOnUserPayload {
  postsPost: Post
  userUser: User
}

type AddToPostReactionsPayload {
  postPost: Post
  reactionsReaction: Reaction
}

type AddToUserNotificationsPayload {
  notificationsNotification: Notification
  userUser: User
}

type AddToUserOnUserPayload {
  friends2User: User
  friends1User: User
}

# AuthenticateUserPayload
type AuthenticateUserPayload {
  id: ID!
  token: String!
}

type Chat implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input ChatFilter {
  # Logical AND on all given filters.
  AND: [ChatFilter!]

  # Logical OR on all given filters.
  OR: [ChatFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum ChatOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ChatPreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input ChatSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [ChatSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [ChatSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ChatSubscriptionFilterNode
}

input ChatSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

type ChatSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Chat
  updatedFields: [String!]
  previousValues: ChatPreviousValues
}

type Comment implements Node {
  author(filter: UserFilter): User
  body: String!
  createdAt: DateTime!
  id: ID!
  post(filter: PostFilter): Post
  updatedAt: DateTime!
}

input CommentauthorUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

input CommentFilter {
  # Logical AND on all given filters.
  AND: [CommentFilter!]

  # Logical OR on all given filters.
  OR: [CommentFilter!]
  body: String

  # All values that are not equal to given value.
  body_not: String

  # All values that are contained in given list.
  body_in: [String!]

  # All values that are not contained in given list.
  body_not_in: [String!]

  # All values less than the given value.
  body_lt: String

  # All values less than or equal the given value.
  body_lte: String

  # All values greater than the given value.
  body_gt: String

  # All values greater than or equal the given value.
  body_gte: String

  # All values containing the given string.
  body_contains: String

  # All values not containing the given string.
  body_not_contains: String

  # All values starting with the given string.
  body_starts_with: String

  # All values not starting with the given string.
  body_not_starts_with: String

  # All values ending with the given string.
  body_ends_with: String

  # All values not ending with the given string.
  body_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  author: UserFilter
  post: PostFilter
}

enum CommentOrderBy {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input CommentpostPost {
  body: String!
  images: [String!]
  videos: [String!]
  userId: ID
  user: PostuserUser
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
  reactionsIds: [ID!]
  reactions: [PostreactionsReaction!]
}

type CommentPreviousValues {
  body: String!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input CommentSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [CommentSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [CommentSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: CommentSubscriptionFilterNode
}

input CommentSubscriptionFilterNode {
  body: String

  # All values that are not equal to given value.
  body_not: String

  # All values that are contained in given list.
  body_in: [String!]

  # All values that are not contained in given list.
  body_not_in: [String!]

  # All values less than the given value.
  body_lt: String

  # All values less than or equal the given value.
  body_lte: String

  # All values greater than the given value.
  body_gt: String

  # All values greater than or equal the given value.
  body_gte: String

  # All values containing the given string.
  body_contains: String

  # All values not containing the given string.
  body_not_contains: String

  # All values starting with the given string.
  body_starts_with: String

  # All values not starting with the given string.
  body_not_starts_with: String

  # All values ending with the given string.
  body_ends_with: String

  # All values not ending with the given string.
  body_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  author: UserFilter
  post: PostFilter
}

type CommentSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Comment
  updatedFields: [String!]
  previousValues: CommentPreviousValues
}

input CreateComment {
  body: String!
  authorId: ID
  author: CommentauthorUser
  postId: ID
  post: CommentpostPost
}

input CreateEvent {
  date: String!
  time: String!
  attendeesIds: [ID!]
  attendees: [EventattendeesUser!]
}

input CreateFile {
  contentType: String!
  name: String!
  secret: String!
  size: Int!
  url: String!
}

input CreateGroup {
  usersIds: [ID!]
  users: [GroupusersUser!]
}

input CreateNotification {
  userId: ID
  user: NotificationuserUser
}

input CreatePost {
  body: String!
  images: [String!]
  videos: [String!]
  userId: ID
  user: PostuserUser
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
  reactionsIds: [ID!]
  reactions: [PostreactionsReaction!]
}

input CreateReaction {
  type: ReactionType!
  postId: ID
  post: ReactionpostPost
  userId: ID
  user: ReactionuserUser
}

input CreateUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

scalar DateTime

type Event implements Node {
  attendees(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  createdAt: DateTime!
  date: String!
  id: ID!
  time: String!
  updatedAt: DateTime!

  # Meta information about the query.
  _attendeesMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input EventattendeesUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

input EventFilter {
  # Logical AND on all given filters.
  AND: [EventFilter!]

  # Logical OR on all given filters.
  OR: [EventFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  date: String

  # All values that are not equal to given value.
  date_not: String

  # All values that are contained in given list.
  date_in: [String!]

  # All values that are not contained in given list.
  date_not_in: [String!]

  # All values less than the given value.
  date_lt: String

  # All values less than or equal the given value.
  date_lte: String

  # All values greater than the given value.
  date_gt: String

  # All values greater than or equal the given value.
  date_gte: String

  # All values containing the given string.
  date_contains: String

  # All values not containing the given string.
  date_not_contains: String

  # All values starting with the given string.
  date_starts_with: String

  # All values not starting with the given string.
  date_not_starts_with: String

  # All values ending with the given string.
  date_ends_with: String

  # All values not ending with the given string.
  date_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  time: String

  # All values that are not equal to given value.
  time_not: String

  # All values that are contained in given list.
  time_in: [String!]

  # All values that are not contained in given list.
  time_not_in: [String!]

  # All values less than the given value.
  time_lt: String

  # All values less than or equal the given value.
  time_lte: String

  # All values greater than the given value.
  time_gt: String

  # All values greater than or equal the given value.
  time_gte: String

  # All values containing the given string.
  time_contains: String

  # All values not containing the given string.
  time_not_contains: String

  # All values starting with the given string.
  time_starts_with: String

  # All values not starting with the given string.
  time_not_starts_with: String

  # All values ending with the given string.
  time_ends_with: String

  # All values not ending with the given string.
  time_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  attendees_every: UserFilter
  attendees_some: UserFilter
  attendees_none: UserFilter
}

enum EventOrderBy {
  createdAt_ASC
  createdAt_DESC
  date_ASC
  date_DESC
  id_ASC
  id_DESC
  time_ASC
  time_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type EventPreviousValues {
  createdAt: DateTime!
  date: String!
  id: ID!
  time: String!
  updatedAt: DateTime!
}

input EventSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [EventSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [EventSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: EventSubscriptionFilterNode
}

input EventSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  date: String

  # All values that are not equal to given value.
  date_not: String

  # All values that are contained in given list.
  date_in: [String!]

  # All values that are not contained in given list.
  date_not_in: [String!]

  # All values less than the given value.
  date_lt: String

  # All values less than or equal the given value.
  date_lte: String

  # All values greater than the given value.
  date_gt: String

  # All values greater than or equal the given value.
  date_gte: String

  # All values containing the given string.
  date_contains: String

  # All values not containing the given string.
  date_not_contains: String

  # All values starting with the given string.
  date_starts_with: String

  # All values not starting with the given string.
  date_not_starts_with: String

  # All values ending with the given string.
  date_ends_with: String

  # All values not ending with the given string.
  date_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  time: String

  # All values that are not equal to given value.
  time_not: String

  # All values that are contained in given list.
  time_in: [String!]

  # All values that are not contained in given list.
  time_not_in: [String!]

  # All values less than the given value.
  time_lt: String

  # All values less than or equal the given value.
  time_lte: String

  # All values greater than the given value.
  time_gt: String

  # All values greater than or equal the given value.
  time_gte: String

  # All values containing the given string.
  time_contains: String

  # All values not containing the given string.
  time_not_contains: String

  # All values starting with the given string.
  time_starts_with: String

  # All values not starting with the given string.
  time_not_starts_with: String

  # All values ending with the given string.
  time_ends_with: String

  # All values not ending with the given string.
  time_not_ends_with: String
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  attendees_every: UserFilter
  attendees_some: UserFilter
  attendees_none: UserFilter
}

type EventSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Event
  updatedFields: [String!]
  previousValues: EventPreviousValues
}

type File implements Node {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

input FileFilter {
  # Logical AND on all given filters.
  AND: [FileFilter!]

  # Logical OR on all given filters.
  OR: [FileFilter!]
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

enum FileOrderBy {
  contentType_ASC
  contentType_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  secret_ASC
  secret_DESC
  size_ASC
  size_DESC
  updatedAt_ASC
  updatedAt_DESC
  url_ASC
  url_DESC
}

type FilePreviousValues {
  contentType: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  secret: String!
  size: Int!
  updatedAt: DateTime!
  url: String!
}

input FileSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [FileSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [FileSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: FileSubscriptionFilterNode
}

input FileSubscriptionFilterNode {
  contentType: String

  # All values that are not equal to given value.
  contentType_not: String

  # All values that are contained in given list.
  contentType_in: [String!]

  # All values that are not contained in given list.
  contentType_not_in: [String!]

  # All values less than the given value.
  contentType_lt: String

  # All values less than or equal the given value.
  contentType_lte: String

  # All values greater than the given value.
  contentType_gt: String

  # All values greater than or equal the given value.
  contentType_gte: String

  # All values containing the given string.
  contentType_contains: String

  # All values not containing the given string.
  contentType_not_contains: String

  # All values starting with the given string.
  contentType_starts_with: String

  # All values not starting with the given string.
  contentType_not_starts_with: String

  # All values ending with the given string.
  contentType_ends_with: String

  # All values not ending with the given string.
  contentType_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  name: String

  # All values that are not equal to given value.
  name_not: String

  # All values that are contained in given list.
  name_in: [String!]

  # All values that are not contained in given list.
  name_not_in: [String!]

  # All values less than the given value.
  name_lt: String

  # All values less than or equal the given value.
  name_lte: String

  # All values greater than the given value.
  name_gt: String

  # All values greater than or equal the given value.
  name_gte: String

  # All values containing the given string.
  name_contains: String

  # All values not containing the given string.
  name_not_contains: String

  # All values starting with the given string.
  name_starts_with: String

  # All values not starting with the given string.
  name_not_starts_with: String

  # All values ending with the given string.
  name_ends_with: String

  # All values not ending with the given string.
  name_not_ends_with: String
  secret: String

  # All values that are not equal to given value.
  secret_not: String

  # All values that are contained in given list.
  secret_in: [String!]

  # All values that are not contained in given list.
  secret_not_in: [String!]

  # All values less than the given value.
  secret_lt: String

  # All values less than or equal the given value.
  secret_lte: String

  # All values greater than the given value.
  secret_gt: String

  # All values greater than or equal the given value.
  secret_gte: String

  # All values containing the given string.
  secret_contains: String

  # All values not containing the given string.
  secret_not_contains: String

  # All values starting with the given string.
  secret_starts_with: String

  # All values not starting with the given string.
  secret_not_starts_with: String

  # All values ending with the given string.
  secret_ends_with: String

  # All values not ending with the given string.
  secret_not_ends_with: String
  size: Int

  # All values that are not equal to given value.
  size_not: Int

  # All values that are contained in given list.
  size_in: [Int!]

  # All values that are not contained in given list.
  size_not_in: [Int!]

  # All values less than the given value.
  size_lt: Int

  # All values less than or equal the given value.
  size_lte: Int

  # All values greater than the given value.
  size_gt: Int

  # All values greater than or equal the given value.
  size_gte: Int
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  url: String

  # All values that are not equal to given value.
  url_not: String

  # All values that are contained in given list.
  url_in: [String!]

  # All values that are not contained in given list.
  url_not_in: [String!]

  # All values less than the given value.
  url_lt: String

  # All values less than or equal the given value.
  url_lte: String

  # All values greater than the given value.
  url_gt: String

  # All values greater than or equal the given value.
  url_gte: String

  # All values containing the given string.
  url_contains: String

  # All values not containing the given string.
  url_not_contains: String

  # All values starting with the given string.
  url_starts_with: String

  # All values not starting with the given string.
  url_not_starts_with: String

  # All values ending with the given string.
  url_ends_with: String

  # All values not ending with the given string.
  url_not_ends_with: String
}

type FileSubscriptionPayload {
  mutation: _ModelMutationType!
  node: File
  updatedFields: [String!]
  previousValues: FilePreviousValues
}

enum Gender {
  Male
  Female
}

type Group implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  users(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]

  # Meta information about the query.
  _usersMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input GroupFilter {
  # Logical AND on all given filters.
  AND: [GroupFilter!]

  # Logical OR on all given filters.
  OR: [GroupFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  users_every: UserFilter
  users_some: UserFilter
  users_none: UserFilter
}

enum GroupOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type GroupPreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input GroupSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [GroupSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [GroupSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: GroupSubscriptionFilterNode
}

input GroupSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  users_every: UserFilter
  users_some: UserFilter
  users_none: UserFilter
}

type GroupSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupusersUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

# LoggedInUserPayload
type LoggedInUserPayload {
  id: ID!
  firstName: String
  lastName: String
  username: String
  avatar: String
}

type Mutation {
  createChat: Chat
  createComment(body: String!, authorId: ID, author: CommentauthorUser, postId: ID, post: CommentpostPost): Comment
  createEvent(date: String!, time: String!, attendeesIds: [ID!], attendees: [EventattendeesUser!]): Event
  createFile(contentType: String!, name: String!, secret: String!, size: Int!, url: String!): File
  createGroup(usersIds: [ID!], users: [GroupusersUser!]): Group
  createNotification(userId: ID, user: NotificationuserUser): Notification
  createPage: Page
  createPost(body: String!, images: [String!], videos: [String!], userId: ID, user: PostuserUser, commentsIds: [ID!], comments: [PostcommentsComment!], reactionsIds: [ID!], reactions: [PostreactionsReaction!]): Post
  createReaction(type: ReactionType!, postId: ID, post: ReactionpostPost, userId: ID, user: ReactionuserUser): Reaction
  updateChat(id: ID!): Chat
  updateComment(body: String, id: ID!, authorId: ID, author: CommentauthorUser, postId: ID, post: CommentpostPost): Comment
  updateEvent(date: String, id: ID!, time: String, attendeesIds: [ID!], attendees: [EventattendeesUser!]): Event
  updateFile(contentType: String, id: ID!, name: String, secret: String, size: Int, url: String): File
  updateGroup(id: ID!, usersIds: [ID!], users: [GroupusersUser!]): Group
  updateNotification(id: ID!, userId: ID, user: NotificationuserUser): Notification
  updatePage(id: ID!): Page
  updatePost(body: String, id: ID!, images: [String!], videos: [String!], userId: ID, user: PostuserUser, commentsIds: [ID!], comments: [PostcommentsComment!], reactionsIds: [ID!], reactions: [PostreactionsReaction!]): Post
  updateReaction(id: ID!, type: ReactionType, postId: ID, post: ReactionpostPost, userId: ID, user: ReactionuserUser): Reaction
  updateUser(avatar: String, bio: String, coverImage: String, currentCity: String, email: String, featuredImages: [String!], firstName: String, gender: Gender, homeTown: String, id: ID!, lastName: String, password: String, phoneNumber: String, relationshipStatus: Relationship, username: String, reactionId: ID, reaction: UserreactionReaction, commentsIds: [ID!], comments: [UsercommentsComment!], eventsIds: [ID!], events: [UsereventsEvent!], friendsIds: [ID!], friends: [UserfriendsUser!], groupsIds: [ID!], groups: [UsergroupsGroup!], notificationsIds: [ID!], postsIds: [ID!], posts: [UserpostsPost!]): User
  updateOrCreateChat(update: UpdateChat!): Chat
  updateOrCreateComment(update: UpdateComment!, create: CreateComment!): Comment
  updateOrCreateEvent(update: UpdateEvent!, create: CreateEvent!): Event
  updateOrCreateFile(update: UpdateFile!, create: CreateFile!): File
  updateOrCreateGroup(update: UpdateGroup!, create: CreateGroup!): Group
  updateOrCreateNotification(update: UpdateNotification!, create: CreateNotification!): Notification
  updateOrCreatePage(update: UpdatePage!): Page
  updateOrCreatePost(update: UpdatePost!, create: CreatePost!): Post
  updateOrCreateReaction(update: UpdateReaction!, create: CreateReaction!): Reaction
  updateOrCreateUser(update: UpdateUser!, create: CreateUser!): User
  deleteChat(id: ID!): Chat
  deleteComment(id: ID!): Comment
  deleteEvent(id: ID!): Event
  deleteFile(id: ID!): File
  deleteGroup(id: ID!): Group
  deleteNotification(id: ID!): Notification
  deletePage(id: ID!): Page
  deletePost(id: ID!): Post
  deleteReaction(id: ID!): Reaction
  deleteUser(id: ID!): User
  setUserReactions(userUserId: ID!, reactionReactionId: ID!): SetUserReactionsPayload
  addToCommentAuthor(authorUserId: ID!, commentsCommentId: ID!): AddToCommentAuthorPayload
  addToEventOnUser(attendeesUserId: ID!, eventsEventId: ID!): AddToEventOnUserPayload
  addToGroupUsers(usersUserId: ID!, groupsGroupId: ID!): AddToGroupUsersPayload
  addToPostOnComment(postPostId: ID!, commentsCommentId: ID!): AddToPostOnCommentPayload
  addToPostOnUser(userUserId: ID!, postsPostId: ID!): AddToPostOnUserPayload
  addToPostReactions(reactionsReactionId: ID!, postPostId: ID!): AddToPostReactionsPayload
  addToUserNotifications(userUserId: ID!, notificationsNotificationId: ID!): AddToUserNotificationsPayload
  addToUserOnUser(friends1UserId: ID!, friends2UserId: ID!): AddToUserOnUserPayload
  removeFromCommentAuthor(authorUserId: ID!, commentsCommentId: ID!): RemoveFromCommentAuthorPayload
  removeFromEventOnUser(attendeesUserId: ID!, eventsEventId: ID!): RemoveFromEventOnUserPayload
  removeFromGroupUsers(usersUserId: ID!, groupsGroupId: ID!): RemoveFromGroupUsersPayload
  removeFromPostOnComment(postPostId: ID!, commentsCommentId: ID!): RemoveFromPostOnCommentPayload
  removeFromUserOnUser(friends1UserId: ID!, friends2UserId: ID!): RemoveFromUserOnUserPayload
  createUser(avatar: String, bio: String, coverImage: String, currentCity: String, email: String!, featuredImages: [String!], firstName: String!, gender: Gender, homeTown: String, lastName: String!, password: String!, phoneNumber: String, relationshipStatus: Relationship, username: String!, reactionId: ID, reaction: UserreactionReaction, commentsIds: [ID!], comments: [UsercommentsComment!], eventsIds: [ID!], events: [UsereventsEvent!], friendsIds: [ID!], friends: [UserfriendsUser!], groupsIds: [ID!], groups: [UsergroupsGroup!], notificationsIds: [ID!], postsIds: [ID!], posts: [UserpostsPost!]): User

  # authenticate
  authenticateUser(username: String!, password: String!): AuthenticateUserPayload

  # signup
  signupUser(firstName: String!, lastName: String!, username: String!, email: String!, password: String!): SignupUserPayload
}

# An object with an ID
interface Node {
  # The id of the object.
  id: ID!
}

type Notification implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
  user(filter: UserFilter): User!
}

input NotificationFilter {
  # Logical AND on all given filters.
  AND: [NotificationFilter!]

  # Logical OR on all given filters.
  OR: [NotificationFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  user: UserFilter
}

enum NotificationOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationPreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input NotificationSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [NotificationSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [NotificationSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: NotificationSubscriptionFilterNode
}

input NotificationSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  user: UserFilter
}

type NotificationSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationuserUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

type Page implements Node {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input PageFilter {
  # Logical AND on all given filters.
  AND: [PageFilter!]

  # Logical OR on all given filters.
  OR: [PageFilter!]
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

enum PageOrderBy {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PagePreviousValues {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input PageSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PageSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PageSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PageSubscriptionFilterNode
}

input PageSubscriptionFilterNode {
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
}

type PageSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Page
  updatedFields: [String!]
  previousValues: PagePreviousValues
}

type Post implements Node {
  body: String!
  comments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  createdAt: DateTime!
  id: ID!
  images: [String!]
  reactions(filter: ReactionFilter, orderBy: ReactionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction!]
  updatedAt: DateTime!
  user(filter: UserFilter): User!
  videos: [String!]

  # Meta information about the query.
  _commentsMeta(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _reactionsMeta(filter: ReactionFilter, orderBy: ReactionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input PostcommentsComment {
  body: String!
  authorId: ID
  author: CommentauthorUser
}

input PostFilter {
  # Logical AND on all given filters.
  AND: [PostFilter!]

  # Logical OR on all given filters.
  OR: [PostFilter!]
  body: String

  # All values that are not equal to given value.
  body_not: String

  # All values that are contained in given list.
  body_in: [String!]

  # All values that are not contained in given list.
  body_not_in: [String!]

  # All values less than the given value.
  body_lt: String

  # All values less than or equal the given value.
  body_lte: String

  # All values greater than the given value.
  body_gt: String

  # All values greater than or equal the given value.
  body_gte: String

  # All values containing the given string.
  body_contains: String

  # All values not containing the given string.
  body_not_contains: String

  # All values starting with the given string.
  body_starts_with: String

  # All values not starting with the given string.
  body_not_starts_with: String

  # All values ending with the given string.
  body_ends_with: String

  # All values not ending with the given string.
  body_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
  reactions_every: ReactionFilter
  reactions_some: ReactionFilter
  reactions_none: ReactionFilter
  user: UserFilter
}

enum PostOrderBy {
  body_ASC
  body_DESC
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PostPreviousValues {
  body: String!
  createdAt: DateTime!
  id: ID!
  images: [String!]
  updatedAt: DateTime!
  videos: [String!]
}

input PostreactionsReaction {
  type: ReactionType!
  userId: ID
  user: ReactionuserUser
}

input PostSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [PostSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [PostSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: PostSubscriptionFilterNode
}

input PostSubscriptionFilterNode {
  body: String

  # All values that are not equal to given value.
  body_not: String

  # All values that are contained in given list.
  body_in: [String!]

  # All values that are not contained in given list.
  body_not_in: [String!]

  # All values less than the given value.
  body_lt: String

  # All values less than or equal the given value.
  body_lte: String

  # All values greater than the given value.
  body_gt: String

  # All values greater than or equal the given value.
  body_gte: String

  # All values containing the given string.
  body_contains: String

  # All values not containing the given string.
  body_not_contains: String

  # All values starting with the given string.
  body_starts_with: String

  # All values not starting with the given string.
  body_not_starts_with: String

  # All values ending with the given string.
  body_ends_with: String

  # All values not ending with the given string.
  body_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
  reactions_every: ReactionFilter
  reactions_some: ReactionFilter
  reactions_none: ReactionFilter
  user: UserFilter
}

type PostSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostuserUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

type Query {
  allChats(filter: ChatFilter, orderBy: ChatOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Chat!]!
  allComments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]!
  allEvents(filter: EventFilter, orderBy: EventOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]!
  allFiles(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [File!]!
  allGroups(filter: GroupFilter, orderBy: GroupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]!
  allNotifications(filter: NotificationFilter, orderBy: NotificationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]!
  allPages(filter: PageFilter, orderBy: PageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Page!]!
  allPosts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]!
  allReactions(filter: ReactionFilter, orderBy: ReactionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Reaction!]!
  allUsers(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]!
  _allChatsMeta(filter: ChatFilter, orderBy: ChatOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allCommentsMeta(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allEventsMeta(filter: EventFilter, orderBy: EventOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allFilesMeta(filter: FileFilter, orderBy: FileOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allGroupsMeta(filter: GroupFilter, orderBy: GroupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allNotificationsMeta(filter: NotificationFilter, orderBy: NotificationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPagesMeta(filter: PageFilter, orderBy: PageOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allPostsMeta(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allReactionsMeta(filter: ReactionFilter, orderBy: ReactionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  _allUsersMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
  Chat(id: ID): Chat
  Comment(id: ID): Comment
  Event(id: ID): Event
  File(id: ID, secret: String, url: String): File
  Group(id: ID): Group
  Notification(id: ID): Notification
  Page(id: ID): Page
  Post(id: ID): Post
  Reaction(id: ID): Reaction
  User(email: String, id: ID, username: String): User

  # loggedInUser
  loggedInUser: LoggedInUserPayload
  user: User

  # Fetches an object given its ID
  node(
    # The ID of an object
    id: ID!
  ): Node
}

type Reaction implements Node {
  id: ID!
  post(filter: PostFilter): Post!
  type: ReactionType!
  user(filter: UserFilter): User!
}

input ReactionFilter {
  # Logical AND on all given filters.
  AND: [ReactionFilter!]

  # Logical OR on all given filters.
  OR: [ReactionFilter!]
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  type: ReactionType

  # All values that are not equal to given value.
  type_not: ReactionType

  # All values that are contained in given list.
  type_in: [ReactionType!]

  # All values that are not contained in given list.
  type_not_in: [ReactionType!]
  post: PostFilter
  user: UserFilter
}

enum ReactionOrderBy {
  id_ASC
  id_DESC
  type_ASC
  type_DESC
}

input ReactionpostPost {
  body: String!
  images: [String!]
  videos: [String!]
  userId: ID
  user: PostuserUser
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
  reactionsIds: [ID!]
  reactions: [PostreactionsReaction!]
}

type ReactionPreviousValues {
  id: ID!
  type: ReactionType!
}

input ReactionSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [ReactionSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [ReactionSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: ReactionSubscriptionFilterNode
}

input ReactionSubscriptionFilterNode {
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  type: ReactionType

  # All values that are not equal to given value.
  type_not: ReactionType

  # All values that are contained in given list.
  type_in: [ReactionType!]

  # All values that are not contained in given list.
  type_not_in: [ReactionType!]
  post: PostFilter
  user: UserFilter
}

type ReactionSubscriptionPayload {
  mutation: _ModelMutationType!
  node: Reaction
  updatedFields: [String!]
  previousValues: ReactionPreviousValues
}

enum ReactionType {
  Like
  Dislike
  Sad
  Angry
  Funny
}

input ReactionuserUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

enum Relationship {
  Single
  Married
  Divorced
  Widowed
}

type RemoveFromCommentAuthorPayload {
  commentsComment: Comment
  authorUser: User
}

type RemoveFromEventOnUserPayload {
  eventsEvent: Event
  attendeesUser: User
}

type RemoveFromGroupUsersPayload {
  groupsGroup: Group
  usersUser: User
}

type RemoveFromPostOnCommentPayload {
  commentsComment: Comment
  postPost: Post
}

type RemoveFromUserOnUserPayload {
  friends2User: User
  friends1User: User
}

type SetUserReactionsPayload {
  reactionReaction: Reaction
  userUser: User
}

# SignupUserPayload
type SignupUserPayload {
  id: ID!
  token: String!
}

type Subscription {
  Chat(filter: ChatSubscriptionFilter): ChatSubscriptionPayload
  Comment(filter: CommentSubscriptionFilter): CommentSubscriptionPayload
  Event(filter: EventSubscriptionFilter): EventSubscriptionPayload
  File(filter: FileSubscriptionFilter): FileSubscriptionPayload
  Group(filter: GroupSubscriptionFilter): GroupSubscriptionPayload
  Notification(filter: NotificationSubscriptionFilter): NotificationSubscriptionPayload
  Page(filter: PageSubscriptionFilter): PageSubscriptionPayload
  Post(filter: PostSubscriptionFilter): PostSubscriptionPayload
  Reaction(filter: ReactionSubscriptionFilter): ReactionSubscriptionPayload
  User(filter: UserSubscriptionFilter): UserSubscriptionPayload
}

input UpdateChat {
  id: ID!
}

input UpdateComment {
  body: String
  id: ID!
  authorId: ID
  author: CommentauthorUser
  postId: ID
  post: CommentpostPost
}

input UpdateEvent {
  date: String
  id: ID!
  time: String
  attendeesIds: [ID!]
  attendees: [EventattendeesUser!]
}

input UpdateFile {
  contentType: String
  id: ID!
  name: String
  secret: String
  size: Int
  url: String
}

input UpdateGroup {
  id: ID!
  usersIds: [ID!]
  users: [GroupusersUser!]
}

input UpdateNotification {
  id: ID!
  userId: ID
  user: NotificationuserUser
}

input UpdatePage {
  id: ID!
}

input UpdatePost {
  body: String
  id: ID!
  images: [String!]
  videos: [String!]
  userId: ID
  user: PostuserUser
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
  reactionsIds: [ID!]
  reactions: [PostreactionsReaction!]
}

input UpdateReaction {
  id: ID!
  type: ReactionType
  postId: ID
  post: ReactionpostPost
  userId: ID
  user: ReactionuserUser
}

input UpdateUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String
  featuredImages: [String!]
  firstName: String
  gender: Gender
  homeTown: String
  id: ID!
  lastName: String
  password: String
  phoneNumber: String
  relationshipStatus: Relationship
  username: String
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

type User implements Node {
  avatar: String
  bio: String
  comments(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Comment!]
  coverImage: String
  createdAt: DateTime!
  currentCity: String
  email: String!
  events(filter: EventFilter, orderBy: EventOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Event!]
  featuredImages: [String!]
  firstName: String!
  friends(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  gender: Gender
  groups(filter: GroupFilter, orderBy: GroupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  homeTown: String
  id: ID!
  lastName: String!
  notifications(filter: NotificationFilter, orderBy: NotificationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  password: String!
  phoneNumber: String
  posts(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): [Post!]
  reaction(filter: ReactionFilter): Reaction
  relationshipStatus: Relationship
  updatedAt: DateTime!
  username: String!

  # Meta information about the query.
  _commentsMeta(filter: CommentFilter, orderBy: CommentOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _eventsMeta(filter: EventFilter, orderBy: EventOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _friendsMeta(filter: UserFilter, orderBy: UserOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _groupsMeta(filter: GroupFilter, orderBy: GroupOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _notificationsMeta(filter: NotificationFilter, orderBy: NotificationOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!

  # Meta information about the query.
  _postsMeta(filter: PostFilter, orderBy: PostOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): _QueryMeta!
}

input UsercommentsComment {
  body: String!
  postId: ID
  post: CommentpostPost
}

input UsereventsEvent {
  date: String!
  time: String!
  attendeesIds: [ID!]
  attendees: [EventattendeesUser!]
}

input UserFilter {
  # Logical AND on all given filters.
  AND: [UserFilter!]

  # Logical OR on all given filters.
  OR: [UserFilter!]
  avatar: String

  # All values that are not equal to given value.
  avatar_not: String

  # All values that are contained in given list.
  avatar_in: [String!]

  # All values that are not contained in given list.
  avatar_not_in: [String!]

  # All values less than the given value.
  avatar_lt: String

  # All values less than or equal the given value.
  avatar_lte: String

  # All values greater than the given value.
  avatar_gt: String

  # All values greater than or equal the given value.
  avatar_gte: String

  # All values containing the given string.
  avatar_contains: String

  # All values not containing the given string.
  avatar_not_contains: String

  # All values starting with the given string.
  avatar_starts_with: String

  # All values not starting with the given string.
  avatar_not_starts_with: String

  # All values ending with the given string.
  avatar_ends_with: String

  # All values not ending with the given string.
  avatar_not_ends_with: String
  bio: String

  # All values that are not equal to given value.
  bio_not: String

  # All values that are contained in given list.
  bio_in: [String!]

  # All values that are not contained in given list.
  bio_not_in: [String!]

  # All values less than the given value.
  bio_lt: String

  # All values less than or equal the given value.
  bio_lte: String

  # All values greater than the given value.
  bio_gt: String

  # All values greater than or equal the given value.
  bio_gte: String

  # All values containing the given string.
  bio_contains: String

  # All values not containing the given string.
  bio_not_contains: String

  # All values starting with the given string.
  bio_starts_with: String

  # All values not starting with the given string.
  bio_not_starts_with: String

  # All values ending with the given string.
  bio_ends_with: String

  # All values not ending with the given string.
  bio_not_ends_with: String
  coverImage: String

  # All values that are not equal to given value.
  coverImage_not: String

  # All values that are contained in given list.
  coverImage_in: [String!]

  # All values that are not contained in given list.
  coverImage_not_in: [String!]

  # All values less than the given value.
  coverImage_lt: String

  # All values less than or equal the given value.
  coverImage_lte: String

  # All values greater than the given value.
  coverImage_gt: String

  # All values greater than or equal the given value.
  coverImage_gte: String

  # All values containing the given string.
  coverImage_contains: String

  # All values not containing the given string.
  coverImage_not_contains: String

  # All values starting with the given string.
  coverImage_starts_with: String

  # All values not starting with the given string.
  coverImage_not_starts_with: String

  # All values ending with the given string.
  coverImage_ends_with: String

  # All values not ending with the given string.
  coverImage_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  currentCity: String

  # All values that are not equal to given value.
  currentCity_not: String

  # All values that are contained in given list.
  currentCity_in: [String!]

  # All values that are not contained in given list.
  currentCity_not_in: [String!]

  # All values less than the given value.
  currentCity_lt: String

  # All values less than or equal the given value.
  currentCity_lte: String

  # All values greater than the given value.
  currentCity_gt: String

  # All values greater than or equal the given value.
  currentCity_gte: String

  # All values containing the given string.
  currentCity_contains: String

  # All values not containing the given string.
  currentCity_not_contains: String

  # All values starting with the given string.
  currentCity_starts_with: String

  # All values not starting with the given string.
  currentCity_not_starts_with: String

  # All values ending with the given string.
  currentCity_ends_with: String

  # All values not ending with the given string.
  currentCity_not_ends_with: String
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  firstName: String

  # All values that are not equal to given value.
  firstName_not: String

  # All values that are contained in given list.
  firstName_in: [String!]

  # All values that are not contained in given list.
  firstName_not_in: [String!]

  # All values less than the given value.
  firstName_lt: String

  # All values less than or equal the given value.
  firstName_lte: String

  # All values greater than the given value.
  firstName_gt: String

  # All values greater than or equal the given value.
  firstName_gte: String

  # All values containing the given string.
  firstName_contains: String

  # All values not containing the given string.
  firstName_not_contains: String

  # All values starting with the given string.
  firstName_starts_with: String

  # All values not starting with the given string.
  firstName_not_starts_with: String

  # All values ending with the given string.
  firstName_ends_with: String

  # All values not ending with the given string.
  firstName_not_ends_with: String
  gender: Gender

  # All values that are not equal to given value.
  gender_not: Gender

  # All values that are contained in given list.
  gender_in: [Gender!]

  # All values that are not contained in given list.
  gender_not_in: [Gender!]
  homeTown: String

  # All values that are not equal to given value.
  homeTown_not: String

  # All values that are contained in given list.
  homeTown_in: [String!]

  # All values that are not contained in given list.
  homeTown_not_in: [String!]

  # All values less than the given value.
  homeTown_lt: String

  # All values less than or equal the given value.
  homeTown_lte: String

  # All values greater than the given value.
  homeTown_gt: String

  # All values greater than or equal the given value.
  homeTown_gte: String

  # All values containing the given string.
  homeTown_contains: String

  # All values not containing the given string.
  homeTown_not_contains: String

  # All values starting with the given string.
  homeTown_starts_with: String

  # All values not starting with the given string.
  homeTown_not_starts_with: String

  # All values ending with the given string.
  homeTown_ends_with: String

  # All values not ending with the given string.
  homeTown_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lastName: String

  # All values that are not equal to given value.
  lastName_not: String

  # All values that are contained in given list.
  lastName_in: [String!]

  # All values that are not contained in given list.
  lastName_not_in: [String!]

  # All values less than the given value.
  lastName_lt: String

  # All values less than or equal the given value.
  lastName_lte: String

  # All values greater than the given value.
  lastName_gt: String

  # All values greater than or equal the given value.
  lastName_gte: String

  # All values containing the given string.
  lastName_contains: String

  # All values not containing the given string.
  lastName_not_contains: String

  # All values starting with the given string.
  lastName_starts_with: String

  # All values not starting with the given string.
  lastName_not_starts_with: String

  # All values ending with the given string.
  lastName_ends_with: String

  # All values not ending with the given string.
  lastName_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  phoneNumber: String

  # All values that are not equal to given value.
  phoneNumber_not: String

  # All values that are contained in given list.
  phoneNumber_in: [String!]

  # All values that are not contained in given list.
  phoneNumber_not_in: [String!]

  # All values less than the given value.
  phoneNumber_lt: String

  # All values less than or equal the given value.
  phoneNumber_lte: String

  # All values greater than the given value.
  phoneNumber_gt: String

  # All values greater than or equal the given value.
  phoneNumber_gte: String

  # All values containing the given string.
  phoneNumber_contains: String

  # All values not containing the given string.
  phoneNumber_not_contains: String

  # All values starting with the given string.
  phoneNumber_starts_with: String

  # All values not starting with the given string.
  phoneNumber_not_starts_with: String

  # All values ending with the given string.
  phoneNumber_ends_with: String

  # All values not ending with the given string.
  phoneNumber_not_ends_with: String
  relationshipStatus: Relationship

  # All values that are not equal to given value.
  relationshipStatus_not: Relationship

  # All values that are contained in given list.
  relationshipStatus_in: [Relationship!]

  # All values that are not contained in given list.
  relationshipStatus_not_in: [Relationship!]
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  username: String

  # All values that are not equal to given value.
  username_not: String

  # All values that are contained in given list.
  username_in: [String!]

  # All values that are not contained in given list.
  username_not_in: [String!]

  # All values less than the given value.
  username_lt: String

  # All values less than or equal the given value.
  username_lte: String

  # All values greater than the given value.
  username_gt: String

  # All values greater than or equal the given value.
  username_gte: String

  # All values containing the given string.
  username_contains: String

  # All values not containing the given string.
  username_not_contains: String

  # All values starting with the given string.
  username_starts_with: String

  # All values not starting with the given string.
  username_not_starts_with: String

  # All values ending with the given string.
  username_ends_with: String

  # All values not ending with the given string.
  username_not_ends_with: String
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
  events_every: EventFilter
  events_some: EventFilter
  events_none: EventFilter
  friends_every: UserFilter
  friends_some: UserFilter
  friends_none: UserFilter
  groups_every: GroupFilter
  groups_some: GroupFilter
  groups_none: GroupFilter
  notifications_every: NotificationFilter
  notifications_some: NotificationFilter
  notifications_none: NotificationFilter
  posts_every: PostFilter
  posts_some: PostFilter
  posts_none: PostFilter
  reaction: ReactionFilter
}

input UserfriendsUser {
  avatar: String
  bio: String
  coverImage: String
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  username: String!
  reactionId: ID
  reaction: UserreactionReaction
  commentsIds: [ID!]
  comments: [UsercommentsComment!]
  eventsIds: [ID!]
  events: [UsereventsEvent!]
  friendsIds: [ID!]
  friends: [UserfriendsUser!]
  groupsIds: [ID!]
  groups: [UsergroupsGroup!]
  notificationsIds: [ID!]
  postsIds: [ID!]
  posts: [UserpostsPost!]
}

input UsergroupsGroup {
  usersIds: [ID!]
  users: [GroupusersUser!]
}

enum UserOrderBy {
  avatar_ASC
  avatar_DESC
  bio_ASC
  bio_DESC
  coverImage_ASC
  coverImage_DESC
  createdAt_ASC
  createdAt_DESC
  currentCity_ASC
  currentCity_DESC
  email_ASC
  email_DESC
  firstName_ASC
  firstName_DESC
  gender_ASC
  gender_DESC
  homeTown_ASC
  homeTown_DESC
  id_ASC
  id_DESC
  lastName_ASC
  lastName_DESC
  password_ASC
  password_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  relationshipStatus_ASC
  relationshipStatus_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

input UserpostsPost {
  body: String!
  images: [String!]
  videos: [String!]
  commentsIds: [ID!]
  comments: [PostcommentsComment!]
  reactionsIds: [ID!]
  reactions: [PostreactionsReaction!]
}

type UserPreviousValues {
  avatar: String
  bio: String
  coverImage: String
  createdAt: DateTime!
  currentCity: String
  email: String!
  featuredImages: [String!]
  firstName: String!
  gender: Gender
  homeTown: String
  id: ID!
  lastName: String!
  password: String!
  phoneNumber: String
  relationshipStatus: Relationship
  updatedAt: DateTime!
  username: String!
}

input UserreactionReaction {
  type: ReactionType!
  postId: ID
  post: ReactionpostPost
}

input UserSubscriptionFilter {
  # Logical AND on all given filters.
  AND: [UserSubscriptionFilter!]

  # Logical OR on all given filters.
  OR: [UserSubscriptionFilter!]

  # The subscription event gets dispatched when it's listed in mutation_in
  mutation_in: [_ModelMutationType!]

  # The subscription event gets only dispatched when one of the updated fields names is included in this list
  updatedFields_contains: String

  # The subscription event gets only dispatched when all of the field names included in this list have been updated
  updatedFields_contains_every: [String!]

  # The subscription event gets only dispatched when some of the field names included in this list have been updated
  updatedFields_contains_some: [String!]
  node: UserSubscriptionFilterNode
}

input UserSubscriptionFilterNode {
  avatar: String

  # All values that are not equal to given value.
  avatar_not: String

  # All values that are contained in given list.
  avatar_in: [String!]

  # All values that are not contained in given list.
  avatar_not_in: [String!]

  # All values less than the given value.
  avatar_lt: String

  # All values less than or equal the given value.
  avatar_lte: String

  # All values greater than the given value.
  avatar_gt: String

  # All values greater than or equal the given value.
  avatar_gte: String

  # All values containing the given string.
  avatar_contains: String

  # All values not containing the given string.
  avatar_not_contains: String

  # All values starting with the given string.
  avatar_starts_with: String

  # All values not starting with the given string.
  avatar_not_starts_with: String

  # All values ending with the given string.
  avatar_ends_with: String

  # All values not ending with the given string.
  avatar_not_ends_with: String
  bio: String

  # All values that are not equal to given value.
  bio_not: String

  # All values that are contained in given list.
  bio_in: [String!]

  # All values that are not contained in given list.
  bio_not_in: [String!]

  # All values less than the given value.
  bio_lt: String

  # All values less than or equal the given value.
  bio_lte: String

  # All values greater than the given value.
  bio_gt: String

  # All values greater than or equal the given value.
  bio_gte: String

  # All values containing the given string.
  bio_contains: String

  # All values not containing the given string.
  bio_not_contains: String

  # All values starting with the given string.
  bio_starts_with: String

  # All values not starting with the given string.
  bio_not_starts_with: String

  # All values ending with the given string.
  bio_ends_with: String

  # All values not ending with the given string.
  bio_not_ends_with: String
  coverImage: String

  # All values that are not equal to given value.
  coverImage_not: String

  # All values that are contained in given list.
  coverImage_in: [String!]

  # All values that are not contained in given list.
  coverImage_not_in: [String!]

  # All values less than the given value.
  coverImage_lt: String

  # All values less than or equal the given value.
  coverImage_lte: String

  # All values greater than the given value.
  coverImage_gt: String

  # All values greater than or equal the given value.
  coverImage_gte: String

  # All values containing the given string.
  coverImage_contains: String

  # All values not containing the given string.
  coverImage_not_contains: String

  # All values starting with the given string.
  coverImage_starts_with: String

  # All values not starting with the given string.
  coverImage_not_starts_with: String

  # All values ending with the given string.
  coverImage_ends_with: String

  # All values not ending with the given string.
  coverImage_not_ends_with: String
  createdAt: DateTime

  # All values that are not equal to given value.
  createdAt_not: DateTime

  # All values that are contained in given list.
  createdAt_in: [DateTime!]

  # All values that are not contained in given list.
  createdAt_not_in: [DateTime!]

  # All values less than the given value.
  createdAt_lt: DateTime

  # All values less than or equal the given value.
  createdAt_lte: DateTime

  # All values greater than the given value.
  createdAt_gt: DateTime

  # All values greater than or equal the given value.
  createdAt_gte: DateTime
  currentCity: String

  # All values that are not equal to given value.
  currentCity_not: String

  # All values that are contained in given list.
  currentCity_in: [String!]

  # All values that are not contained in given list.
  currentCity_not_in: [String!]

  # All values less than the given value.
  currentCity_lt: String

  # All values less than or equal the given value.
  currentCity_lte: String

  # All values greater than the given value.
  currentCity_gt: String

  # All values greater than or equal the given value.
  currentCity_gte: String

  # All values containing the given string.
  currentCity_contains: String

  # All values not containing the given string.
  currentCity_not_contains: String

  # All values starting with the given string.
  currentCity_starts_with: String

  # All values not starting with the given string.
  currentCity_not_starts_with: String

  # All values ending with the given string.
  currentCity_ends_with: String

  # All values not ending with the given string.
  currentCity_not_ends_with: String
  email: String

  # All values that are not equal to given value.
  email_not: String

  # All values that are contained in given list.
  email_in: [String!]

  # All values that are not contained in given list.
  email_not_in: [String!]

  # All values less than the given value.
  email_lt: String

  # All values less than or equal the given value.
  email_lte: String

  # All values greater than the given value.
  email_gt: String

  # All values greater than or equal the given value.
  email_gte: String

  # All values containing the given string.
  email_contains: String

  # All values not containing the given string.
  email_not_contains: String

  # All values starting with the given string.
  email_starts_with: String

  # All values not starting with the given string.
  email_not_starts_with: String

  # All values ending with the given string.
  email_ends_with: String

  # All values not ending with the given string.
  email_not_ends_with: String
  firstName: String

  # All values that are not equal to given value.
  firstName_not: String

  # All values that are contained in given list.
  firstName_in: [String!]

  # All values that are not contained in given list.
  firstName_not_in: [String!]

  # All values less than the given value.
  firstName_lt: String

  # All values less than or equal the given value.
  firstName_lte: String

  # All values greater than the given value.
  firstName_gt: String

  # All values greater than or equal the given value.
  firstName_gte: String

  # All values containing the given string.
  firstName_contains: String

  # All values not containing the given string.
  firstName_not_contains: String

  # All values starting with the given string.
  firstName_starts_with: String

  # All values not starting with the given string.
  firstName_not_starts_with: String

  # All values ending with the given string.
  firstName_ends_with: String

  # All values not ending with the given string.
  firstName_not_ends_with: String
  gender: Gender

  # All values that are not equal to given value.
  gender_not: Gender

  # All values that are contained in given list.
  gender_in: [Gender!]

  # All values that are not contained in given list.
  gender_not_in: [Gender!]
  homeTown: String

  # All values that are not equal to given value.
  homeTown_not: String

  # All values that are contained in given list.
  homeTown_in: [String!]

  # All values that are not contained in given list.
  homeTown_not_in: [String!]

  # All values less than the given value.
  homeTown_lt: String

  # All values less than or equal the given value.
  homeTown_lte: String

  # All values greater than the given value.
  homeTown_gt: String

  # All values greater than or equal the given value.
  homeTown_gte: String

  # All values containing the given string.
  homeTown_contains: String

  # All values not containing the given string.
  homeTown_not_contains: String

  # All values starting with the given string.
  homeTown_starts_with: String

  # All values not starting with the given string.
  homeTown_not_starts_with: String

  # All values ending with the given string.
  homeTown_ends_with: String

  # All values not ending with the given string.
  homeTown_not_ends_with: String
  id: ID

  # All values that are not equal to given value.
  id_not: ID

  # All values that are contained in given list.
  id_in: [ID!]

  # All values that are not contained in given list.
  id_not_in: [ID!]

  # All values less than the given value.
  id_lt: ID

  # All values less than or equal the given value.
  id_lte: ID

  # All values greater than the given value.
  id_gt: ID

  # All values greater than or equal the given value.
  id_gte: ID

  # All values containing the given string.
  id_contains: ID

  # All values not containing the given string.
  id_not_contains: ID

  # All values starting with the given string.
  id_starts_with: ID

  # All values not starting with the given string.
  id_not_starts_with: ID

  # All values ending with the given string.
  id_ends_with: ID

  # All values not ending with the given string.
  id_not_ends_with: ID
  lastName: String

  # All values that are not equal to given value.
  lastName_not: String

  # All values that are contained in given list.
  lastName_in: [String!]

  # All values that are not contained in given list.
  lastName_not_in: [String!]

  # All values less than the given value.
  lastName_lt: String

  # All values less than or equal the given value.
  lastName_lte: String

  # All values greater than the given value.
  lastName_gt: String

  # All values greater than or equal the given value.
  lastName_gte: String

  # All values containing the given string.
  lastName_contains: String

  # All values not containing the given string.
  lastName_not_contains: String

  # All values starting with the given string.
  lastName_starts_with: String

  # All values not starting with the given string.
  lastName_not_starts_with: String

  # All values ending with the given string.
  lastName_ends_with: String

  # All values not ending with the given string.
  lastName_not_ends_with: String
  password: String

  # All values that are not equal to given value.
  password_not: String

  # All values that are contained in given list.
  password_in: [String!]

  # All values that are not contained in given list.
  password_not_in: [String!]

  # All values less than the given value.
  password_lt: String

  # All values less than or equal the given value.
  password_lte: String

  # All values greater than the given value.
  password_gt: String

  # All values greater than or equal the given value.
  password_gte: String

  # All values containing the given string.
  password_contains: String

  # All values not containing the given string.
  password_not_contains: String

  # All values starting with the given string.
  password_starts_with: String

  # All values not starting with the given string.
  password_not_starts_with: String

  # All values ending with the given string.
  password_ends_with: String

  # All values not ending with the given string.
  password_not_ends_with: String
  phoneNumber: String

  # All values that are not equal to given value.
  phoneNumber_not: String

  # All values that are contained in given list.
  phoneNumber_in: [String!]

  # All values that are not contained in given list.
  phoneNumber_not_in: [String!]

  # All values less than the given value.
  phoneNumber_lt: String

  # All values less than or equal the given value.
  phoneNumber_lte: String

  # All values greater than the given value.
  phoneNumber_gt: String

  # All values greater than or equal the given value.
  phoneNumber_gte: String

  # All values containing the given string.
  phoneNumber_contains: String

  # All values not containing the given string.
  phoneNumber_not_contains: String

  # All values starting with the given string.
  phoneNumber_starts_with: String

  # All values not starting with the given string.
  phoneNumber_not_starts_with: String

  # All values ending with the given string.
  phoneNumber_ends_with: String

  # All values not ending with the given string.
  phoneNumber_not_ends_with: String
  relationshipStatus: Relationship

  # All values that are not equal to given value.
  relationshipStatus_not: Relationship

  # All values that are contained in given list.
  relationshipStatus_in: [Relationship!]

  # All values that are not contained in given list.
  relationshipStatus_not_in: [Relationship!]
  updatedAt: DateTime

  # All values that are not equal to given value.
  updatedAt_not: DateTime

  # All values that are contained in given list.
  updatedAt_in: [DateTime!]

  # All values that are not contained in given list.
  updatedAt_not_in: [DateTime!]

  # All values less than the given value.
  updatedAt_lt: DateTime

  # All values less than or equal the given value.
  updatedAt_lte: DateTime

  # All values greater than the given value.
  updatedAt_gt: DateTime

  # All values greater than or equal the given value.
  updatedAt_gte: DateTime
  username: String

  # All values that are not equal to given value.
  username_not: String

  # All values that are contained in given list.
  username_in: [String!]

  # All values that are not contained in given list.
  username_not_in: [String!]

  # All values less than the given value.
  username_lt: String

  # All values less than or equal the given value.
  username_lte: String

  # All values greater than the given value.
  username_gt: String

  # All values greater than or equal the given value.
  username_gte: String

  # All values containing the given string.
  username_contains: String

  # All values not containing the given string.
  username_not_contains: String

  # All values starting with the given string.
  username_starts_with: String

  # All values not starting with the given string.
  username_not_starts_with: String

  # All values ending with the given string.
  username_ends_with: String

  # All values not ending with the given string.
  username_not_ends_with: String
  comments_every: CommentFilter
  comments_some: CommentFilter
  comments_none: CommentFilter
  events_every: EventFilter
  events_some: EventFilter
  events_none: EventFilter
  friends_every: UserFilter
  friends_some: UserFilter
  friends_none: UserFilter
  groups_every: GroupFilter
  groups_some: GroupFilter
  groups_none: GroupFilter
  notifications_every: NotificationFilter
  notifications_some: NotificationFilter
  notifications_none: NotificationFilter
  posts_every: PostFilter
  posts_some: PostFilter
  posts_none: PostFilter
  reaction: ReactionFilter
}

type UserSubscriptionPayload {
  mutation: _ModelMutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}
